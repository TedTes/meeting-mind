'use client';

import { useState } from 'react';
import { Copy, CheckCircle, Download } from 'lucide-react';

export default function SummaryDisplay({ summary }) {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleDownload = () => {
    const element = document.createElement('a');
    const file = new Blob([summary], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `meeting-summary-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const formatSummary = (text) => {
    const sections = text.split('**').filter(Boolean);
    const formattedSections = [];
    
    for (let i = 0; i < sections.length; i += 2) {
      if (sections[i + 1]) {
        const title = sections[i].trim();
        const content = sections[i + 1].trim();
        
        if (title && content) {
          formattedSections.push({ title, content });
        }
      }
    }
    
    return formattedSections;
  };

  const sections = formatSummary(summary);

  if (!summary) return null;

  return (
    <div className="w-full max-w-4xl mx-auto mt-8 animate-fade-in-up">
      <div className="card shadow-lg">
        {/* Header */}
        <div className="border-b border-gray-200 px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Meeting Summary</h2>
              <p className="text-gray-500 mt-2">
                Generated on {new Date().toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={handleCopy}
                className="btn-secondary flex items-center space-x-2"
              >
                {copied ? (
                  <>
                    <CheckCircle className="h-4 w-4 text-green-600" />
                    <span className="text-green-600 font-medium">Copied!</span>
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4" />
                    <span>Copy</span>
                  </>
                )}
              </button>
              <button
                onClick={handleDownload}
                className="btn-primary flex items-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>Download</span>
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {sections.length > 0 ? (
            sections.map((section, index) => (
              <div key={index} className="summary-section">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">
                  {section.title}
                </h3>
                <div className="prose prose-sm max-w-none">
                  {section.content.split('\n').map((line, lineIndex) => {
                    const trimmedLine = line.trim();
                    if (!trimmedLine) return null;
                    
                    if (trimmedLine.startsWith('-') || trimmedLine.startsWith('•')) {
                      return (
                        <div key={lineIndex} className="ml-4 mb-2">
                          <span className="text-gray-700">{trimmedLine.substring(1).trim()}</span>
                        </div>
                      );
                    }
                    
                    return (
                      <p key={lineIndex} className="text-gray-700 mb-2 leading-relaxed">
                        {trimmedLine}
                      </p>
                    );
                  })}
                </div>
              </div>
            ))
          ) : (
            <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
              {summary}
            </div>
          )}
        </div>
        
        {/* Footer */}
        <div className="border-t border-gray-200 px-6 py-4 bg-gray-50">
          <p className="text-xs text-gray-500 text-center">
            Summary generated by MeetingMind AI • Review for accuracy before sharing
          </p>
        </div>
      </div>
    </div>
  );
}